{"version":3,"file":"pixi-webfont-loader.modern.js","sources":["../src/pixi-webfont-loader.ts"],"sourcesContent":["import { LoaderResource, ILoaderPlugin } from '@pixi/loaders';\nimport FontFaceObserver from 'fontfaceobserver';\nexport default class WebfontLoaderPlugin implements ILoaderPlugin\n{\n    // Export the export\n    public static readonly FontFaceObserver = FontFaceObserver;\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    static add(..._params: any[]): any\n    {\n        LoaderResource.setExtensionLoadType('css', LoaderResource.LOAD_TYPE.XHR);\n        LoaderResource.setExtensionXhrType('css', LoaderResource.XHR_RESPONSE_TYPE.TEXT);\n    }\n    static use(resource: LoaderResource, next: (...params: any[]) => any): void\n    {\n        if (!resource.extension.endsWith('css'))\n        {\n            next();\n\n            return;\n        }\n\n        // create the CSS link\n        const newLink = document.createElement('link');\n\n        newLink.rel = 'stylesheet';\n        newLink.type = 'text/css';\n        newLink.href = resource.url;\n\n        // append to head\n        document.head.appendChild(newLink);\n\n        // parse the css\n        const allFonts = WebfontLoaderPlugin.parseCss(resource.data);\n\n        // make the outputs\n        const promiseArr = [];\n        const fontDefinitionArr = [];\n\n        // my bundler can't do conditional chaining and I don't know why\n        const metadata = resource.metadata;\n        const testString = metadata === null || metadata === undefined ? undefined : metadata.testString;\n        const timeout = metadata === null || metadata === undefined ? undefined : metadata.timeout;\n\n        for (const font of allFonts)\n        {\n            if (typeof font.style['font-family'] === 'string')\n            {\n                // add watchface promises\n                promiseArr.push(\n                    new FontFaceObserver(font.style['font-family'].replace(/['|\"]/gi, ''), {\n                        style: font.style['font-style'],\n                        weight: font.style['font-weight'],\n                        stretch: font.style['font-stretch'],\n                    }).load(testString, timeout),\n                );\n\n                // make the loaded font data for later user reference\n                fontDefinitionArr.push({\n                    fontFamily: font.style['font-family'].replace(/['|\"]/gi, ''),\n                    fontStyle: font.style['font-style'],\n                    fontWeight: font.style['font-weight'],\n                    // fontStretch: font.style[\"font-stretch\"], //pixi doesn't know this\n                });\n            }\n        }\n\n        // store the fonts that we loaded\n        resource.data = fontDefinitionArr;\n\n        // wait for all fonts to be ready\n        // use finally because loaders in pixi ALWAYS end. Even on catastrophic failures.\n        Promise.all(promiseArr).finally(() => next());\n    }\n\n    /**\tParse a CSS StyleSheet into an Array of CSSStyleRule objects,\n\t *\teach having normalized `selectorText` and `style` properties.\n\t *\tHardcore regex stolen from: https://jsfiddle.net/developit/vzkckrw4/\n\t *\t@param {String} stylesheet\n\t *\t@returns {Array(CSSStyleRule)}\n\t */\n    private static parseCss(text: string): { selectorText: string; style: any; cssText: string }[]\n    {\n        const tokenizer = /([\\s\\S]+?)\\{([\\s\\S]*?)\\}/gi;\n        const rules = [];\n        let rule;\n        let token;\n\n        text = text.replace(/\\/\\*[\\s\\S]*?\\*\\//g, '');\n        while ((token = tokenizer.exec(text)))\n        {\n            const style = WebfontLoaderPlugin.parseRule(token[2].trim());\n\n            style.cssText = WebfontLoaderPlugin.stringifyRule(style);\n            rule = {\n                selectorText: token[1].trim().replace(/\\s*\\,\\s*/, ', '),\n                style,\n                cssText: '',\n            };\n            rule.cssText = `${rule.selectorText} { ${rule.style.cssText as string} }`;\n            rules.push(rule);\n        }\n\n        return rules;\n    }\n\n    private static parseRule(css: string): any\n    {\n        const tokenizer = /\\s*([a-z\\-]+)\\s*:\\s*((?:[^;]*url\\(.*?\\)[^;]*|[^;]*)*)\\s*(?:;|$)/gi;\n        const obj: any = {};\n        let token;\n\n        while ((token = tokenizer.exec(css)))\n        {\n            obj[token[1].toLowerCase()] = token[2];\n        }\n\n        return obj;\n    }\n\n    private static stringifyRule(style: any): string\n    {\n        let text = '';\n        const keys = Object.keys(style).sort();\n\n        for (let i = 0; i < keys.length; i++)\n        {\n            text += ` ${keys[i]}: ${style[keys[i]] as string};`;\n        }\n\n        return text.substring(1);\n    }\n}\n\n// export { FontFaceObserver } from 'fontfaceobserver';\n"],"names":["WebfontLoaderPlugin","[object Object]","_params","LoaderResource","setExtensionLoadType","LOAD_TYPE","XHR","setExtensionXhrType","XHR_RESPONSE_TYPE","TEXT","resource","next","extension","endsWith","newLink","document","createElement","rel","type","href","url","head","appendChild","allFonts","parseCss","data","promiseArr","fontDefinitionArr","metadata","testString","undefined","timeout","font","style","push","FontFaceObserver","replace","weight","stretch","load","fontFamily","fontStyle","fontWeight","Promise","all","finally","text","tokenizer","rules","rule","token","exec","parseRule","trim","cssText","stringifyRule","selectorText","css","obj","toLowerCase","keys","Object","sort","i","length","substring"],"mappings":"qFAEqBA,EAMjBC,cAAcC,GAEVC,EAAeC,qBAAqB,MAAOD,EAAeE,UAAUC,KACpEH,EAAeI,oBAAoB,MAAOJ,EAAeK,kBAAkBC,MAE/ER,WAAWS,EAA0BC,GAEjC,IAAKD,EAASE,UAAUC,SAAS,OAI7B,YAFAF,IAMJ,MAAMG,EAAUC,SAASC,cAAc,QAEvCF,EAAQG,IAAM,aACdH,EAAQI,KAAO,WACfJ,EAAQK,KAAOT,EAASU,IAGxBL,SAASM,KAAKC,YAAYR,GAG1B,MAAMS,EAAWvB,EAAoBwB,SAASd,EAASe,MAGjDC,EAAa,GACbC,EAAoB,GAGpBC,EAAWlB,EAASkB,SACpBC,EAAaD,MAAAA,OAA8CE,EAAYF,EAASC,WAChFE,EAAUH,MAAAA,OAA8CE,EAAYF,EAASG,QAEnF,IAAK,MAAMC,KAAQT,EAE0B,iBAA9BS,EAAKC,MAAM,iBAGlBP,EAAWQ,KACP,IAAIC,EAAiBH,EAAKC,MAAM,eAAeG,QAAQ,UAAW,IAAK,CACnEH,MAAOD,EAAKC,MAAM,cAClBI,OAAQL,EAAKC,MAAM,eACnBK,QAASN,EAAKC,MAAM,kBACrBM,KAAKV,EAAYE,IAIxBJ,EAAkBO,KAAK,CACnBM,WAAYR,EAAKC,MAAM,eAAeG,QAAQ,UAAW,IACzDK,UAAWT,EAAKC,MAAM,cACtBS,WAAYV,EAAKC,MAAM,kBAOnCvB,EAASe,KAAOE,EAIhBgB,QAAQC,IAAIlB,GAAYmB,QAAQ,IAAMlC,KASlCV,gBAAgB6C,GAEpB,MAAMC,EAAY,6BACZC,EAAQ,GACd,IAAIC,EACAC,EAGJ,IADAJ,EAAOA,EAAKV,QAAQ,oBAAqB,IACjCc,EAAQH,EAAUI,KAAKL,IAC/B,CACI,MAAMb,EAAQjC,EAAoBoD,UAAUF,EAAM,GAAGG,QAErDpB,EAAMqB,QAAUtD,EAAoBuD,cAActB,GAClDgB,EAAO,CACHO,aAAcN,EAAM,GAAGG,OAAOjB,QAAQ,WAAY,MAClDH,MAAAA,EACAqB,QAAS,IAEbL,EAAKK,WAAaL,EAAKO,kBAAkBP,EAAKhB,MAAMqB,YACpDN,EAAMd,KAAKe,GAGf,OAAOD,EAGH/C,iBAAiBwD,GAErB,MAAMV,EAAY,oEACZW,EAAW,GACjB,IAAIR,EAEJ,KAAQA,EAAQH,EAAUI,KAAKM,IAE3BC,EAAIR,EAAM,GAAGS,eAAiBT,EAAM,GAGxC,OAAOQ,EAGHzD,qBAAqBgC,GAEzB,IAAIa,EAAO,GACX,MAAMc,EAAOC,OAAOD,KAAK3B,GAAO6B,OAEhC,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAKI,OAAQD,IAE7BjB,OAAYc,EAAKG,OAAO9B,EAAM2B,EAAKG,OAGvC,OAAOjB,EAAKmB,UAAU,IA7HHjE,mBAAmBmC"}