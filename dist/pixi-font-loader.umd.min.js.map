{"version":3,"file":"pixi-font-loader.umd.min.js","sources":["../src/cssTools.ts"],"sourcesContent":["function parseRule(css: string): any\n{\n    const tokenizer = /\\s*([a-z\\-]+)\\s*:\\s*((?:[^;]*url\\(.*?\\)[^;]*|[^;]*)*)\\s*(?:;|$)/gi;\n    const obj: any = {};\n    let token;\n\n    while ((token = tokenizer.exec(css)))\n    {\n        obj[token[1].toLowerCase()] = token[2];\n    }\n\n    return obj;\n}\n\nfunction stringifyRule(style: any): string\n{\n    let text = '';\n    const keys = Object.keys(style).sort();\n\n    for (let i = 0; i < keys.length; i++)\n    {\n        text += ` ${keys[i]}: ${style[keys[i]] as string};`;\n    }\n\n    return text.substring(1);\n}\n\n/**\tParse a CSS StyleSheet into an Array of CSSStyleRule objects,\n\t *\teach having normalized `selectorText` and `style` properties.\n\t *\tHardcore regex stolen from: https://jsfiddle.net/developit/vzkckrw4/\n\t *\t@param {String} stylesheet\n\t *\t@returns {Array(CSSStyleRule)}\n\t */\nexport function parseCss(text: string): { selectorText: string; style: any; cssText: string }[]\n{\n    const tokenizer = /([\\s\\S]+?)\\{([\\s\\S]*?)\\}/gi;\n    const rules = [];\n    let rule;\n    let token;\n\n    text = text.replace(/\\/\\*[\\s\\S]*?\\*\\//g, '');\n    while ((token = tokenizer.exec(text)))\n    {\n        const style = parseRule(token[2].trim());\n\n        style.cssText = stringifyRule(style);\n        rule = {\n            selectorText: token[1].trim().replace(/\\s*\\,\\s*/, ', '),\n            style,\n            cssText: '',\n        };\n        rule.cssText = `${rule.selectorText} { ${rule.style.cssText as string} }`;\n        rules.push(rule);\n    }\n\n    return rules;\n}\n"],"names":[],"mappings":";2XAAA,2JAcA"}